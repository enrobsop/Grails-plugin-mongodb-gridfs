   

Install: 

grails install-plugin mongodb-gridfs

Configure:

<big>Adding the setting you're file path/to/app/grails-app/config/Config.groovy</big>

    gridfsConfig.db.host = "localhost"                                             // host for mongodb
    gridfsConfig.db.name = "myGridfs"                                              // db name
    gridfsConfig.db.collection = "files"                                           // collections for files


    gridfsConfig.iconsdir = "images/icons"                                      // dir for icons                                             // url prefix for files
    gridfsConfig.imagestype = ["jpg","gif","png","bmp"]                            // extensions  images for  thumbs
    gridfsConfig.allowedExtensions = ["jpg","gif","png","bmp","doc","rtf","zip"]  // allowedExtensions
    gridfsConfig.tmpdir = "tmp/files"                                             // tmp dir
    gridfsConfig.defaulticon = "images/icons/empty.png"                             // icon default
    gridfsConfig.thumbconfig = [
    publicdir:"tmp/imagesthumb/[idparent]",                 //template for dirs  users thumbnails files
    x_size:128,
    y_size:128
    ]
    gridfsConfig.maxSize = 2000000
    gridfsConfig.controllers.errorController = "gridfs"                     // errors controller
    gridfsConfig.controllers.errorAction  = "help"

    gridfsConfig.controllers.successRemoveController = "gridfs"             // controller for the success remove
    gridfsConfig.controllers.successRemoveAction = "help"

    gridfsConfig.controllers.successController =  "gridfs"              // controller for the success upload
    gridfsConfig.controllers.successAction  =  "help"

    gridfsConfig.controllers.accessController =  "gridfs"              // controller for the access deny
    gridfsConfig.controllers.accesssAction  =  "help"

    gridfsConfig.accessClass  =  "org.iglas.grails.utils.ExampleAccess"             //  class name  for access control
    gridfsConfig.accessMethod  =  "check"                                           //  method name  for access control

    gridfsConfig.indexes  = [
    "metadata.idparent":1,
    "metadata.parentclass":1]


    <big>  Exsamle controler:</big>

    class TestController {

    def index() {
    UserConfig gridfsConfig = new org.iglas.grails.utils.UserConfig("gridfsConfig")
    gridfsConfig.set([controllers:[successController: "test",successAction:"index"]])
    def list =  new org.iglas.grails.gridfs.GridfsService().list([idparent: "myid",relative:true,icon:true])
    render(view:"index", model:[listFiles: list ]
    )

Using: 

Example controller:

  class TestController {

    def index() {
//get config
    UserConfig gridfsConfig = new org.iglas.grails.utils.UserConfig("gridfsConfig")

//set user seting
    gridfsConfig.set([controllers:[successController: "test",successAction:"index"]])

// using service 
    def list =  new org.iglas.grails.gridfs.GridfsService().list([idparent: "myid",relative:true,icon:true])

    render(view:"index", model:[listFiles: list ])
        }
    }


     Example GSP:

    <gridfs:form idparent="myid" parentclass="user" accesspolitic="['public','private','hidden']"
                 errorAction="index" errorController="test"
                 successAction="index" successController="test">
        Description:    <g:textField name="text" />
    </gridfs:form >
    <g:each in="${listFiles}">

        name -> ${it.filename} <br />
        text-> ${it.metadata?.text} <br />
        // formatting size
       size -> <gridfs:prettysize size="${it.size}" />  <br />

        // get icon file path in list (invoke params icon=true)
       icon ->  <img src="${it.iconUrl}" />           <br />

        // get link for download file
        file- <gridfs:download filename="${it.filename}">${it.metadata.originalFilename}</gridfs:download>

        // get icon custom size
        <gridfs:getIcon filename="${it.filename}" title="myicon 150x200" x="150" y="200"/>
        <gridfs:getIcon filename="${it.filename}" title="myicon 50x50" x="50" y="50"/>

        // get link for file
        <img src="${gridfs.createLink(filename:it.filename)}" width="200">

        <br />
        // get link for remove file
        <gridfs:remove filename="${it.filename}">remove</gridfs:remove>

        //using custom controllers action
        <gridfs:remove filename="${it.filename}"  errorAction="index" errorController="test">remove custom Controler</gridfs:remove>
        <hr />

    </g:each>